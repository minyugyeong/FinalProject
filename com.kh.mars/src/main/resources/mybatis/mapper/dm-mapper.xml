<?xml version="1.0" encoding="UTF-8"?>

 <!-- 
 	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다
 	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL 구문을 "아이디"를 이용해서 호출한다
 	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다 
 	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다
 	- 일반적으로 namespace는 테이블명으로 한다!
 	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
 		- <insert>
 		- <select>
 		- <update>
 		- <delete>
 	- 각 구문은 반드시 아이디를 가져야 한다.
 	- 각 구문에는 다음과 같은 속정을 작성할 수 있다
 		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
 		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
 			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 작성한다)
 	- 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다
 		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다
 		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다(DTO 변수명)
  -->

 <!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="dm">
 	<!-- room sequence -->
 	<select id="roomSequence" resultType="int">
 		select room_seq.nextval from dual
 	</select>
 	
 	<!-- dm sequence -->
 	<select id="dmSequence" resultType="int">
 		select dm_seq.nextval from dual
 	</select>
 	
 	<!-- 참가자 등록 -->
	<insert id="insertRoomEnter" parameterType="RoomEnterDto">
		insert into room_enter (member_no, room_no, room_enter_time, room_enter_is)
		values (#{memberNo}, #{roomNo}, sysdate)
	</insert>
	
	<!-- 메세지 등록 -->
	<insert id="insertDm" parameterType="DmDto">
		insert into dm (dm_no, dm_content, dm_type)
		values (#{dmNo}, #{dmContent}, ${dmType})
	</insert>
	
	<!-- 메세지 기록 등록 -->
	<insert id="insertRecord" parameterType="DmRecordDto">
		insert into dm_record (dm_no, who, room_no, target, dm_record_time, dm_record_check)
		values (#{dmNo}, #{who}, #{roomNo}, #{target}, sysdate, 0)
	</insert>
	
	
	<!-- 방 리스트 마지막 content 조회 -->
	<select id="roomList" parameterType="int" resultType="RoomVO">
		select re2.*, m.member_nick, mp.attach_no, d.dm_no, d.dm_content, d.dm_type, d.dm_record_time, d.dm_record_check, d.target, ur."unreadcount" from room_enter re 
		    
		    inner join room_enter re2 on re.room_no = re2.room_no
		    inner join (
		                select dr.room_no, d.*, dr2.dm_record_time, dr2.dm_record_check, dr2.target from dm d
		                inner join(
		                    select room.room_no, max(dm_record.dm_no) "dm_no" from room 
		                    inner join dm_record on room.room_no = dm_record.room_no 
		                    group by room.room_no) dr on d.dm_no = dr."dm_no"
		                inner join dm_record dr2 on d.dm_no = dr2.dm_no
		                ) d on re2.room_no = d.room_no
		    inner join (
		                select * from member
		                    minus
		                select m.* from member m left outer join block b on b.member_no = m.member_no where b.block_no = #{memberNo}
		                ) m on m.member_no = re2.member_no
		    left outer join (
		    	select r.room_no, count(dm_no) "unreadcount" from room r inner join dm_record dr on r.room_no = dr.room_no where dr.dm_record_check = 0 and dr.target = #{memberNo} group by r.room_no
		    		)ur on re.room_no = ur.room_no
		    left outer join member_profile mp on re2.member_no = mp.member_no
	    where re.member_no = #{memberNo} and re.room_enter_is = 1 and re2.member_no != #{memberNo} order by dm_no desc
	</select>
	
	<!-- 메세지 상세조회 -->
	<select id="roomDetail" parameterType="map" resultType="RoomRecordVO">
		select * from (
		    select rownum "rn", tmp.* from (
		        select 
					dr.*, d.dm_content , d.dm_type
				from 
					dm_record dr
					    inner join dm d on dr.dm_no = d.dm_no
					    inner join room_enter re on dr.room_no = re.room_no
			    where dr.room_no = #{roomNo} 
			    	and (dr.who = #{memberNo} or dr.target = #{memberNo}) 
			    	and re.member_no = #{memberNo}
			    	<![CDATA[
			    	and re.room_enter_time <= dr.dm_record_time
			    	]]>
			    	<if test="uptoNo != 0">
		           	<![CDATA[
		            and dr.dm_no <= #{uptoNo}
		            ]]>
			    	</if>
		        order by dr.dm_no desc
		    )tmp
		) where "rn" between (#{dmCount} * 20 - 19) and (#{dmCount} * 20) order by dm_no
	</select>
	
	<select id="roomMember" parameterType="map" resultType="Integer">
		select member_no from room_enter
		    where room_no = #{roomNo} and member_no != #{memberNo}
	</select>
	
	<select id="chooseDm" resultType="RecommendListVO" parameterType="int">
		select * from (
        	select * from (
	        	select m.member_no, m.member_nick, m.member_name, mp.attach_no from follow f
	        
	        	inner join member m on f.follow_target = m.member_no
	        	left outer join member_profile mp on mp.member_no = m.member_no
	        
	        	where f.follow_who = #{memberNo}
        	) order by dbms_random.value
        <![CDATA[
        )where rownum <= 10
        ]]>
	</select>
	
	<select id="roomSearch" resultType="int" parameterType="map">
		select re.room_no from (select * from room_enter where member_no = #{memberNo})re
			inner join (
			select * from room_enter where member_no = #{targetNo}
			)re2 on re.room_no = re2.room_no
		where rownum = 1
	</select>
	
	<select id="dmMemberSearch" resultType="RecommendListVO" parameterType="map">
		select m.member_no, m.member_nick, m.member_name, mp.attach_no from (
	        select * from member where member_no != #{memberNo}
	        minus
	        select m.* from member m left outer join block b on b.member_no = m.member_no where b.block_no = #{memberNo} 
	        minus
	        select m.* from member m left outer join block b on b.block_no = m.member_no where b.member_no = #{memberNo}
	    ) m left outer join member_profile mp on m.member_no = mp.member_no
	    where instr(member_nick, #{keyword}) > 0
	    union
	    select m.member_no, m.member_nick, m.member_name, mp.attach_no from (
	        select * from member where member_no != #{memberNo}
	        minus
	        select m.* from member m left outer join block b on b.member_no = m.member_no where b.block_no = #{memberNo} 
	        minus
	        select m.* from member m left outer join block b on b.block_no = m.member_no where b.member_no = #{memberNo}
    	) m left outer join member_profile mp on m.member_no = mp.member_no
    	where instr(member_name, #{keyword}) > 0
	</select>
	
	<insert id="roomCreate" parameterType="int">
		insert into room values(#{roomNo})
	</insert>
	
	<select id="roomSeq" resultType="int">
		select room_seq.nextval from dual
	</select>
	
	<insert id="roomEnter" parameterType="map">
		insert into room_enter(member_no, room_no, room_enter_time, room_enter_is)
				 values(#{memberNo}, #{roomNo}, sysdate, 0)
	</insert>
	
	<update id="dmCheck" parameterType="map">
		update dm_record set dm_record_check = 1 where target = #{memberNo} and dm_record_check = 0 and room_no = ${roomNo}
	</update>
	
	<update id="roomEnterUpdate" parameterType="int">
		update room_enter set room_enter_is = 1, room_enter_time = sysdate where room_no = #{roomNo} and room_enter_is = 0
	</update>
	
	<update id="roomExit" parameterType="map">
		update room_enter set room_enter_is = 0, room_enter_time = sysdate where member_no = #{memberNo} and room_no = #{roomNo}
	</update>
 </mapper> 