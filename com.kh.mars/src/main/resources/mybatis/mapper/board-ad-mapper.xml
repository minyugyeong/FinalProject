<?xml version="1.0" encoding="UTF-8"?>

 <!-- 
 	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다
 	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL 구문을 "아이디"를 이용해서 호출한다
 	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다 
 	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다
 	- 일반적으로 namespace는 테이블명으로 한다!
 	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
 		- <insert>
 		- <select>
 		- <update>
 		- <delete>
 	- 각 구문은 반드시 아이디를 가져야 한다.
 	- 각 구문에는 다음과 같은 속정을 작성할 수 있다
 		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
 		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
 			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 작성한다)
 	- 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다
 		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다
 		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다(DTO 변수명)
  -->

 <!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="board_ad">
	
	<!-- 등록 -->
	<select id="sequence" resultType="int">
		select board_ad_seq.nextval from dual
	</select>
	
	
	
	<!-- 광고게시글용 게시글 탐색 구문 -->
	
	<resultMap type="BoardMainListVO" id="boardAdMap">
	
		<association property="boardListVO" javaType="BoardListVO">
			<result column="board_ad_no" property="boardNo"/>
			<result column="member_no" property="memberNo"/>
			<result column="board_ad_date" property="boardDate"/>
			<result column="board_ad_content" property="boardContent"/>
			<result column="board_ad_is_reply" property="boardIsReply"/>
			<result column="board_ad_link" property="boardAdLink"/>
			<result column="member_nick" property="memberNick"/>
			<result column="writer_profile" property="writerProfile"/>
			<result column="is_like" property="isLike"/>
			<result column="replycount" property="replycount"/>
			<result column="likecount" property="likecount"/>
		</association>

		 <collection property="attachList" javaType="list" ofType="BoardAttachVO" 
		 	select="adTreeSearchSubquery" column="board_ad_no">
		 	
			<result column="attach_no" property="attachNo"/>		 	
			<result column="board_ad_no" property="boardNo"/>		 	
			<result column="attach_uploadname" property="attachUploadname"/>		 	
			<result column="attach_type" property="attachType"/>		 	
			<result column="attach_size" property="attachSize"/>		 	
		 </collection>
		 <collection property="hashtagList" javaType="list" ofType="BoardHashTagVO" 
		 	select="adTagSearchSubquery" column="board_ad_no">
		 	
			<result column="hashtag_no" property="hashtagNo"/>		 	
			<result column="hashtag_name" property="hashtagName"/>		 	
		 </collection>
	</resultMap>
	
	
	<select id="AdTreeSearch" resultMap="boardAdMap" parameterType="int">
	select * from(
select * from(
    	select * from(
	        select 
	            ba.board_ad_no, ba.member_no, ba.board_ad_content, ba.board_ad_date, ba.board_ad_is_reply, ba.board_ad_link, m.member_nick, mp.attach_no "writer_profile", bal.member_no "is_like", bar."replycount", balc."likecount"
	        from 
	            board_ad ba
	            inner join (select m2.* from member m1        
	                            inner join member m2 on m1.member_interest = m2.member_interest
	                        where m1.member_no = #{memberNo} and m2.member_no != #{memberNo} and m2.member_grade = '비즈니스회원' 
	                        minus 
                            select m.* from member m left outer join block b on b.member_no = m.member_no where b.block_no = #{memberNo}
                            minus 
                            select m.* from member m left outer join block b on b.block_no = m.member_no where b.member_no = #{memberNo}
	                        ) m on ba.member_no = m.member_no
	            inner join member_profile mp on ba.member_no = mp.member_no
	            left outer join (select * from board_ad_like where member_no = #{memberNo}) bal on bal.board_ad_no = ba.board_ad_no
	            left outer join (select board_ad_no, count(reply_no)"replycount" from board_ad_reply group by board_ad_no) bar on bar.board_ad_no = ba.board_ad_no 
	            left outer join (select board_ad_no, count(member_no)"likecount" from board_ad_like group by board_ad_no) balc on balc.board_ad_no = ba.board_ad_no 
	            where ba.board_ad_check = '광고 진행'
	    union
	        select
	            ba.board_ad_no, ba.member_no, ba.board_ad_content, ba.board_ad_date, ba.board_ad_is_reply, ba.board_ad_link, m.member_nick, mp.attach_no "member_profile", bal.member_no "is_like", bar."replycount", balc."likecount"
	        from
	            board_ad ba
	            inner join (select m.* from follow f
	                        inner join member m on f.follow_target = m.member_no
	                        where f.follow_who = #{memberNo} and m.member_grade = '비즈니스회원') m on m.member_no = ba.member_no
	            inner join member_profile mp on ba.member_no = mp.member_no
	            left outer join (select * from board_ad_like where member_no = #{memberNo}) bal on bal.board_ad_no = ba.board_ad_no
	            left outer join (select board_ad_no, count(reply_no)"replycount" from board_ad_reply group by board_ad_no) bar on bar.board_ad_no = ba.board_ad_no 
	            left outer join (select board_ad_no, count(member_no)"likecount" from board_ad_like group by board_ad_no) balc on balc.board_ad_no = ba.board_ad_no 
	            where ba.board_ad_check = '광고 진행'
    	) order by dbms_random.value
    	<![CDATA[
    ) where rownum <= 4
    	]]>
    union all
    select * from(
    	select * from(
            select 
	            ba.board_ad_no, ba.member_no, ba.board_ad_content, ba.board_ad_date, ba.board_ad_is_reply, ba.board_ad_link, m.member_nick, mp.attach_no "writer_profile", bal.member_no "is_like", bar."replycount", balc."likecount"
	        from 
	            board_ad ba
	            inner join (select * from member where member_grade = '비즈니스회원' 
	                        minus 
                            select m.* from member m left outer join block b on b.member_no = m.member_no where b.block_no = #{memberNo}
                            minus 
                            select m.* from member m left outer join block b on b.block_no = m.member_no where b.member_no = #{memberNo}
	                        ) m on ba.member_no = m.member_no
	            inner join member_profile mp on ba.member_no = mp.member_no
	            left outer join (select * from board_ad_like where member_no = #{memberNo}) bal on bal.board_ad_no = ba.board_ad_no
	            left outer join (select board_ad_no, count(reply_no)"replycount" from board_ad_reply group by board_ad_no) bar on bar.board_ad_no = ba.board_ad_no 
	            left outer join (select board_ad_no, count(member_no)"likecount" from board_ad_like group by board_ad_no) balc on balc.board_ad_no = ba.board_ad_no 
	            where ba.board_ad_check = '광고 진행'
        ) order by dbms_random.value
	   ) 
	   <![CDATA[
	   where rownum <= 5
	   ) 
	   where rownum <= 5
    	]]>
	</select>
	<select id="adTreeSearchSubquery" resultType="BoardAttachVO" parameterType="int">
		select ba.board_ad_no, attach.* from (
		      select * from board_ad_attach where board_ad_no = #{board_ad_no}
		)ba inner join attach on ba.attach_no = attach.attach_no
	</select>
	<select id="adTagSearchSubquery" resultType="BoardHashTagVO" parameterType="int">
		select h.* from board_ad_hashtag bh
		    inner join hashtag h on bh.hashtag_no = h.hashtag_no
		where bh.board_ad_no = #{board_ad_no}
	</select>
	
	
	<!-- 광고 게시글 댓글조회 -->
	<select id="detailReply" resultType="BoardReplyVO" parameterType="map">
		select c.*, mm.member_nick from (
		select b.*, mp.attach_no "reply_member_profile" from (
		select aa.*, rp."re_replycount" from (
		select r.* from (
		select * from board_ad_reply where board_ad_no = #{boardNo}
		)a inner join reply r on a.reply_no = r.reply_no
		)aa left outer join (
		select super_no, count(*) "re_replycount" from reply group by super_no
		)rp on aa.reply_no = rp.super_no
		)b left outer join member_profile mp on b.reply_member_no = mp.member_no
		)c inner join member mm on c.reply_member_no = mm.member_no
		CONNECT BY PRIOR c.reply_no = c.super_no 
		START WITH c.super_no = 0 
		ORDER siblings BY c.reply_no desc
	</select>
	
	
	
	
	<insert id="insert" parameterType="BoardAdDto">
		insert into board_ad(board_ad_no, member_no, ad_no, board_ad_date, board_ad_content, board_ad_link, board_ad_count, board_ad_is_reply, board_ad_price) 
		values (#{boardAdNo}, #{memberNo}, #{adNo}, sysdate, #{boardAdContent}, #{boardAdLink}, #{boardAdCount}, #{boardAdIsReply}, #{boardAdPrice})
	</insert>
	
	<select id="selectOne" resultType="BoardAdDto" parameterType="int">
		select * from board_ad where board_ad_no = #{boardAdNo}
	</select>
	
	<select id="selectBoardAdMember" resultType="BoardAdMemberVO" parameterType="int">
		select * from board_ad B
    left outer join member M on B.member_no = M.member_no 
    left outer join member_profile P on M.member_no = P.member_no
    where board_ad_no=#{boardAdNo}
	</select>
	
	<!-- 게시물 첨부파일 조회 -->
	<select id="selectAttach" resultType="BoardAdAttachVO" parameterType="int">
		select * from attach A
    left outer join board_ad_attach B on A.attach_no = B.attach_no
    where B.board_ad_no = #{boardAdNo}
	</select>
	
	
	<!-- 비즈니스 회원 광고 신청 목록 계층형 (첨부파일도 같이) -->
	<resultMap type="BoardAdAttachNoVO" id="boardAdAttachNo">
	
			<result column="board_ad_no" property="boardAdNo"/>
			<result column="member_no" property="memberNo"/>
			<result column="ad_no" property="adNo"/>
			<result column="board_ad_date" property="boardAdDate"/>
			<result column="board_ad_content" property="boardAdContent"/>
			<result column="board_ad_link" property="boardAdLink"/>
			<result column="board_ad_count" property="boardAdCount"/>
			<result column="board_ad_check" property="boardAdCheck"/>
			<result column="board_ad_is_reply" property="boardAdIsReply"/>
			<result column="board_ad_price" property="boardAdPrice"/>
		
			<collection property="attachNoList" javaType="List" ofType="BoardAdAttachDto" select="treeSearchSubquery" column="board_ad_no">
				<result column="board_ad_attach_no" property="boardAdAttachNo"/>
				<result column="board_ad_no" property="boardAdNo"/>
				<result column="attach_no" property="attachNo"/>
			</collection>
		
	</resultMap>
	
	<select id="treeSearch" resultMap="boardAdAttachNo" parameterType="int">
		select * from board_ad where member_no=#{memberNo} 
	</select>
	
	<select id="treeSearchSubquery" resultType="BoardAdAttachDto" parameterType="int">
		select * from board_ad_attach where board_ad_no = #{boardAdNo} 
		order by attach_no asc
	</select>
	
	
	<!-- 광고 게시글 수정 -->
	<update id="edit" parameterType="BoardAdDto">
		update board_ad set 
		ad_no=#{adNo}, 
		board_ad_content=#{boardAdContent},
		board_ad_count=#{boardAdCount}, 
		board_ad_link=#{boardAdLink},
		board_ad_price=#{boardAdPrice},
		board_ad_is_reply=#{boardAdIsReply} where board_ad_no=#{boardAdNo}
	</update>
	
	<!-- 광고 게시글 삭제 -->
	<delete id="delete" parameterType="int">
		delete board_ad where board_ad_no = #{boardAdNo}
	</delete>
	
	
	<!-- 광고 카운트용 구문들 -->
	<!-- 내가 봤는지 먼저 조회 -->
	<select id="checkedAd" resultType="Integer" parameterType="map">
		select board_ad_no from board_ad_check 
			where member_no = #{memberNo} and board_ad_no = #{boardAdNo}
	</select>
	
	<!-- 광고카운트 1빼기 -->
	<update id="adCountMinus" parameterType="int">
		update board_ad set board_ad_count = board_ad_count -1 
			where board_ad_count > 0 and board_ad_check = '광고 진행' and board_ad_no = #{boardAdNo}
	</update>
	
	<!-- 내가 봤다고 추가 -->
	<insert id="checkAd" parameterType="map">
		insert into board_ad_check values (#{memberNo}, #{boardAdNo})
	</insert>
	
	<!-- 광고 마감 -->
	<update id="adIsEnd">
		update board_ad set board_ad_check = '광고 마감' where board_ad_count = 0 and board_ad_check = '광고 진행'
	</update>
	
	<!-- 광고를 봤는지 목록 하루마다 초기화(기간은 조절가능 스케쥴러) -->
	<delete id="deleteCheckedAd">
		delete board_ad_check
	</delete>
	
	
 </mapper> 
 
 
 
 
 
 
 
 
 