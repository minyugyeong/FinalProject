<?xml version="1.0" encoding="UTF-8"?>

 <!-- 
 	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다
 	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL 구문을 "아이디"를 이용해서 호출한다
 	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다 
 	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다
 	- 일반적으로 namespace는 테이블명으로 한다!
 	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
 		- <insert>
 		- <select>
 		- <update>
 		- <delete>
 	- 각 구문은 반드시 아이디를 가져야 한다.
 	- 각 구문에는 다음과 같은 속정을 작성할 수 있다
 		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
 		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
 			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 작성한다)
 	- 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다
 		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다
 		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다(DTO 변수명)
  -->

 <!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="member">
 
 	<!-- 회원 시퀀스 -->
 	<select id="sequence" resultType="int">
 		select member_seq.nextval from dual
 	</select>
 
 	<!-- 회원가입 -->
 	<insert id="join" parameterType="MemberDto">
		insert into member(
			member_no, member_email, member_password, member_gender, member_nick,
			member_phone, member_interest, member_highschool, member_university)
		values(
			#{memberNo}, #{memberEmail}, #{memberPassword}, #{memberGender}, #{memberNick},
			#{memberPhone}, #{memberInterest}, #{memberHighschool}, #{memberUniversity})
	</insert>
	
	<!-- 로그인 -->
	<select id="one" resultType="MemberDto" parameterType="String">
		select * from member where member_email = #{memberEmail}
	</select>
	
	<!-- 내정보 조회 -->
	<select id="myInfo" resultType="MemberDto" parameterType="int">
		select member_no, member_email, member_gender, member_nick, member_phone, 
				member_grade, member_private, member_interest, member_highschool, member_university
		 from member where member_no = #{memberNo}
	</select>
	
	<select id="myProfile" resultType="int" parameterType="int">
		select attach_no from member_profile where member_no = #{memberNo}
	</select>
	
	<!-- 회원번호로 상세조회 -->
	<select id="info" resultType="MemberDto" parameterType="int">
		select * from member where member_no = #{memberNo}
	</select>
	
	<!-- 회원 정보 수정 -->
	<update id="edit" parameterType="MemberDto">
		update member
			set
				member_nick = #{memberNick},
				member_phone = #{memberPhone},
				member_highschool = #{memberHighschool},
				member_university = #{memberUniversity},
				member_gender = #{memberGender},
				member_interest = #{memberInterest},
				member_private = #{memberPrivate}
			where
				member_no = #{memberNo}
	</update>
	
	<update id="changePassword" parameterType="MemberDto">
		update member
		set member_password = #{memberPassword}
		where member_no = #{memberNo}
	</update>
	
	<!-- 닉네임 조회 -->
	<select id="nick" resultType="String" parameterType="int">
		select member_nick from member where member_no = #{memberNo}
	</select>
	
	<!-- 이메일 중복확인 -->
	<select id="checkEmail" resultType="String" parameterType="String">
		select member_email from member where member_email = #{memberEmail}
	</select>
	
 </mapper> 
