<?xml version="1.0" encoding="UTF-8"?>

 <!-- 
 	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다
 	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL 구문을 "아이디"를 이용해서 호출한다
 	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다 
 	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다
 	- 일반적으로 namespace는 테이블명으로 한다!
 	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
 		- <insert>
 		- <select>
 		- <update>
 		- <delete>
 	- 각 구문은 반드시 아이디를 가져야 한다.
 	- 각 구문에는 다음과 같은 속정을 작성할 수 있다
 		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
 		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
 			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 작성한다)
 	- 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다
 		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다
 		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다(DTO 변수명)
  -->

 <!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="board">
 
 <!-- select 구문 -->
 
 	<select id="sequence" resultType="int">
 		select board_seq.nextval from dual
 	</select>
	
	<!-- <select id="mainList" resultType="BoardListVO" parameterType="map">팔로워들의 최근 게시글 조회 구문
		select * from (
		        select rownum rn, TMP.* from(
		            select final.*, member.member_nick"REPLY_NICK" from (
		            select abmbr.board_no, abmbr.member_no, abmbr.board_date, abmbr.board_content, abmbr.board_is_reply, abmbr.follow_target, abmbr.member_nick, rpy.reply_no, rpy.reply_content, rpy.reply_member_no  from (
		            select abm.*, max(br.reply_no)"reply_no" from (
		            select ab.*, m.member_nick from member m inner join(
		            select * from board "B" inner join (
		            select follow_target from follow where follow_who = #{memberNo}
		            )"A" on b.member_no = a.follow_target 
					<if test="uptoNo != 0"> 
					 <![CDATA[
	            	where b.board_no <= #{uptoNo} 
	            	]]> 
	            	</if>
		            )ab on m.member_no = ab.member_no
		            )abm  left outer join board_reply br on br.board_no = abm.board_no group by abm.board_no, abm.member_no, abm.board_date, abm.board_content, abm.board_is_reply, abm.follow_target, abm.member_nick
		            )abmbr left outer join reply rpy on rpy.reply_no = abmbr."reply_no"
		            )final left outer join member on member.member_no = final.reply_member_no order by final.board_no desc 
		        )TMP
		)where rn between ((#{pageCount}-1) * 3 + 1) and (#{pageCount} * 3)
 	</select> -->
	
	<!-- 메인 게시글 리스트용 -->
	<resultMap type="BoardMainListVO" id="boardMap">
	
		<association property="boardListVO" javaType="BoardListVO">
			<result column="board_no" property="boardNo"/>
			<result column="member_no" property="memberNo"/>
			<result column="board_date" property="boardDate"/>
			<result column="board_content" property="boardContent"/>
			<result column="board_is_reply" property="boardIsReply"/>
			<result column="member_nick" property="memberNick"/>
			<result column="writer_profile" property="writerProfile"/>
			<result column="is_like" property="isLike"/>
			<result column="replycount" property="replycount"/>
			<result column="likecount" property="likecount"/>
		</association>

		 <collection property="attachList" javaType="list" ofType="BoardAttachVO" 
		 	select="treeSearchSubquery" column="board_no">
		 	
			<result column="attach_no" property="attachNo"/>		 	
			<result column="board_no" property="boardNo"/>		 	
			<result column="attach_uploadname" property="attachUploadname"/>		 	
			<result column="attach_type" property="attachType"/>		 	
			<result column="attach_size" property="attachSize"/>		 	
		 </collection>
		 <collection property="hashtagList" javaType="list" ofType="BoardHashTagVO" 
		 	select="tagSearchSubquery" column="board_no">
		 	
			<result column="hashtag_no" property="hashtagNo"/>		 	
			<result column="hashtag_name" property="hashtagName"/>		 	
		 </collection>
	</resultMap>
	
	<!-- 메인 게시글들 조회 -->
	<select id="boardTreeSearch" resultMap="boardMap" parameterType="map">
		select * from (
		        select rownum rn, TMP.* from(
		        	select aabb.*, count(bli.board_no) "likecount" from (
					select aacc.*, count(br.reply_no) "replycount" from (
					select abcde.*, bl.member_no "is_like" from (
					select abcd.*, mp.attach_no "writer_profile" from (
					select ab.*, m.member_nick from member m inner join(
					select b.* from board "B" inner join (
					select follow_target from follow where follow_who = #{memberNo}
					)"A" on b.member_no = a.follow_target
					<if test="uptoNo != 0"> 
						 <![CDATA[
		            	where b.board_no <= #{uptoNo}
		            	]]> 
	            	</if>
					)ab on m.member_no = ab.member_no 
					)abcd left outer join member_profile mp on abcd.member_no = mp.member_no
					)abcde left outer join (
					    select * from board_like where member_no =  #{memberNo}
					)bl on abcde.board_no = bl.board_no
					)aacc left outer join board_reply br on aacc.board_no = br.board_no group by aacc.board_no, aacc.member_no, aacc.board_date, aacc.board_content, aacc.board_is_reply, aacc.member_nick, aacc."writer_profile", aacc."is_like"
					)aabb left outer join board_like bli on aabb.board_no = bli.board_no group by aabb.BOARD_NO, aabb.MEMBER_NO, aabb.BOARD_DATE, aabb.BOARD_CONTENT, aabb.BOARD_IS_REPLY, aabb.MEMBER_NICK, aabb."writer_profile", aabb."is_like", aabb."replycount" order by aabb.board_no desc
		        )TMP
		)
		where rn between ((#{pageCount}-1) * 3 + 1) and (#{pageCount} * 3)
	</select>
	<select id="treeSearchSubquery" resultType="BoardAttachVO" parameterType="int">
		select ba.board_no, attach.* from (
		      select * from board_attach where board_no = #{board_no}
		)ba inner join attach on ba.attach_no = attach.attach_no
	</select>
	<select id="tagSearchSubquery" resultType="BoardHashTagVO" parameterType="int">
		select h.* from board_hashtag bh
		    inner join hashtag h on bh.hashtag_no = h.hashtag_no
		where bh.board_no = #{board_no}
	</select>
	
	<select id="detailReply" resultType="BoardReplyVO" parameterType="map">
		select c.*, mm.member_nick from (
		select b.*, mp.attach_no "reply_member_profile" from (
		select aa.*, rp."re_replycount" from (
		select r.* from (
		select * from board_reply where board_no = #{boardNo}
		)a inner join reply r on a.reply_no = r.reply_no
		)aa left outer join (
		select super_no, count(*) "re_replycount" from reply group by super_no
		)rp on aa.reply_no = rp.super_no
		)b left outer join member_profile mp on b.reply_member_no = mp.member_no
		)c inner join member mm on c.reply_member_no = mm.member_no
		CONNECT BY PRIOR c.reply_no = c.super_no 
		START WITH c.super_no = 0 
		ORDER siblings BY c.reply_no desc
	</select>
	
	
	<select id="selectOne" resultType="BoardDto" parameterType="int">
		select * from board where board_no = #{boardNo}
	</select>
	
	<select id="selectBoardMember" resultType="BoardMemberVO" parameterType="int">
		select * from board B
    left outer join member M on B.member_no = M.member_no 
    left outer join member_profile P on M.member_no = P.member_no
    where board_no=#{boardNo}
	</select>
	
	<!-- 게시물 첨부파일 조회 -->
	<select id="selectAttach" resultType="BoardAttachVO" parameterType="int">
		select * from attach A
    left outer join board_attach B on A.attach_no = B.attach_no
    where B.board_no = #{boardNo}
	</select>
	
	
	<!-- 해시태그 게시물(광고 포함, 비공개 계정은 게시물은 검색안됨) 검색 -->
	<!-- <select id="hashSearchBoardList" resultType="" parameterType="int">
		select bh.board_no, min(ba.attach_no) "attach_no", 0 "type" from board_hashtag bh 
		    inner join board b on b.board_no = bh.board_no
		    inner join member m on b.member_no = m.member_no 
		    inner join board_attach ba on ba.board_no = bh.board_no 
		    where m.member_private = 0  and bh.hashtag_no = #{hashtagNo} group by bh.board_no
		union
		select bah.board_ad_no "board_no", min(baa.attach_no), 1 "type" from board_ad_hashtag bah
		    inner join board_ad_attach baa on baa.board_ad_no = bah.board_ad_no
		    where hashtag_no = #{hashtagNo} group by bah.board_ad_no
	</select> -->


<!-- insert 구문 -->	

	<insert id="insert" parameterType="BoardDto">
		insert into board (board_no, member_no, board_date, board_content, board_is_reply) 
		values (#{boardNo}, #{memberNo}, sysdate, #{boardContent}, #{boardIsReply})
	</insert>
	
	<!-- 게시물 수 -->
	<select id="boardCount" parameterType="int" resultType="int">
		select count(*)board_no from board where member_no = #{memberNo}
	</select>
	
	<!-- 게시글 수정 -->
	<update id="edit" parameterType="BoardDto">
		update board set board_content = #{boardContent}, board_is_reply = #{boardIsReply} where board_no = #{boardNo}
	</update>
	
	<!-- 게시글 삭제 -->
	<delete id="delete" parameterType="int">
		delete board where board_no=#{boardNo}
	</delete>
	
	<!-- 회원 페이지 사진 조회 -->
	<select id="pageList" resultType="searchListVO" parameterType="Map">
		select * from(
		    select rownum "rn", TMP.* from (
		        select * from (
		            select b.board_no, ba2."attach_count" ,  ba2."attach_no",0"type", bl."like_count",br."reply_count"  from board b
		                inner join (select b.board_no, count(ba.attach_no)"attach_count", min(ba.attach_no)"attach_no" from board b 
		               						inner join board_attach ba on b.board_no = ba.board_no group by b.board_no) ba2 on b.board_no = ba2.board_no
						LEFT OUTER JOIN (SELECT BOARD_NO,count(MEMBER_NO)"like_count"  FROM board_like group BY BOARD_NO) bl ON bl.board_no = b.BOARD_NO 
						LEFT OUTER JOIN (SELECT BOARD_NO,count(REPLY_NO)"reply_count" FROM BOARD_REPLY group BY BOARD_NO) br ON br.board_no = b.BOARD_NO
		                where b.member_no = #{memberNo} group by b.board_no,ba2."attach_no", ba2."attach_count", bl."like_count", br."reply_count"
		            union
		                select bad.board_ad_no, bada2."attach_count" , bada2."attach_no", 1"type", badl."like_count", badr."reply_count"  from board_ad bad
		                inner join (select bad.board_ad_no, count(bada.attach_no)"attach_count", min(bada.ATTACH_NO)"attach_no" from board_ad bad 
		                					inner join board_ad_attach bada on bad.board_ad_no = bada.board_ad_no group by bad.board_ad_no) bada2 on bad.board_ad_no = bada2.board_ad_no
		                LEFT OUTER JOIN (SELECT board_ad_no, count(member_no)"like_count" FROM board_ad_like GROUP BY BOARD_AD_NO) badl ON badl.board_ad_no = bad.board_ad_no
		                LEFT OUTER JOIN (SELECT board_ad_no, count(reply_no)"reply_count" FROM BOARD_AD_REPLY group BY board_ad_no)badr ON badr.board_ad_no = bad.board_ad_no
		                where bad.member_no = #{memberNo} group by bad.board_ad_no, bada2."attach_no", bada2."attach_count", badl."like_count", badr."reply_count"
		            ) order by board_no desc
		        )TMP 
		    ) where "rn" between ((#{pageCount}-1) * 9 + 1) and (#{pageCount} * 9)
	</select>
	
 </mapper>
 
 
 
 
 
 
 
 