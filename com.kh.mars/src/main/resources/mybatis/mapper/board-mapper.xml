<?xml version="1.0" encoding="UTF-8"?>

 <!-- 
 	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다
 	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL 구문을 "아이디"를 이용해서 호출한다
 	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다 
 	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다
 	- 일반적으로 namespace는 테이블명으로 한다!
 	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
 		- <insert>
 		- <select>
 		- <update>
 		- <delete>
 	- 각 구문은 반드시 아이디를 가져야 한다.
 	- 각 구문에는 다음과 같은 속정을 작성할 수 있다
 		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
 		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
 			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 작성한다)
 	- 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다
 		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다
 		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다(DTO 변수명)
  -->

 <!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="board">
 
 <!-- select 구문 -->
 
 	<select id="sequence" resultType="int">
 		select board_seq.nextval from dual
 	</select>
	
	<select id="mainList" resultType="BoardListVO" parameterType="map"><!-- 팔로워들의 최근 게시글 조회 구문 -->
		select * from (
		        select rownum rn, TMP.* from(
		            select final.*, member.member_nick"REPLY_NICK" from (
		            select abmbr.board_no, abmbr.member_no, abmbr.board_date, abmbr.board_content, abmbr.board_is_reply, abmbr.follow_target, abmbr.member_nick, rpy.reply_no, rpy.reply_content, rpy.reply_member_no  from (
		            select abm.*, max(br.reply_no)"reply_no" from (
		            select ab.*, m.member_nick from member m inner join(
		            select * from board "B" inner join (
		            select follow_target from follow where follow_who = #{memberNo}
		            )"A" on b.member_no = a.follow_target 
					<if test="uptoNo != 0"> 
					 <![CDATA[
	            	where b.board_no <= #{uptoNo} 
	            	]]> 
	            	</if>
		            )ab on m.member_no = ab.member_no
		            )abm  left outer join board_reply br on br.board_no = abm.board_no group by abm.board_no, abm.member_no, abm.board_date, abm.board_content, abm.board_is_reply, abm.follow_target, abm.member_nick
		            )abmbr left outer join reply rpy on rpy.reply_no = abmbr."reply_no"
		            )final left outer join member on member.member_no = final.reply_member_no order by final.board_no desc 
		        )TMP
		)where rn between ((#{pageCount}-1) * 3 + 1) and (#{pageCount} * 3)
 	</select>
	
	<resultMap type="BoardMainListVO" id="boardMap">
		<!-- 
			객체 : paymentDto 에 대한 매핑 설정 
			- 자료형은 변수에 맞게 자동 변환되며 불가능할 경우 오류가 발생함
			- 수동으로 자료형을 지정할 경우 javaType을 설정
		-->
		<association property="boardListVO" javaType="BoardListVO">
			<result column="board_no" property="boardNo"/>
			<result column="member_no" property="memberNo"/>
			<result column="board_date" property="boardDate"/>
			<result column="board_content" property="boardContent"/>
			<result column="board_is_reply" property="boardIsReply"/>
			<result column="follow_target" property="followTarget"/>
			<result column="member_nick" property="memberNick"/>
			<result column="reply_no" property="replyNo"/>
			<result column="reply_content" property="replyContent"/>
			<result column="reply_member_no" property="replyMemberNo"/>
			<result column="reply_nick" property="replyNick"/>
			<result column="writer_profile" property="writerProfile"/>
			<result column="is_like" property="isLike"/>
		</association>
		<!-- 
			컬렉션(List<PaymentDetailDto>)에 대한 매핑 설정
			- 컬렉션은 자료형을 두 가지로 설정해야 한다
				- javaType : 컬렉션의 자료형
				- ofType : 내용물의 자료형(Generic type)
			- 내부에는 객체처럼 result를 이용하여 매핑을 수행한다
			- (반드시) 해당 컬렉션을 채우기 위해 필요한 select 구문의 id를 지정해야 한다(select 속성)
		 -->
		 <collection property="attachList" javaType="list" ofType="BoardAttachVO" 
		 	select="treeSearchSubquery" column="board_no">
		 
			<result column="attach_no" property="attachNo"/>		 	
			<result column="board_no" property="boardNo"/>		 	
			<result column="attach_uploadname" property="attachUploadname"/>		 	
			<result column="attach_type" property="attachType"/>		 	
			<result column="attach_size" property="attachSize"/>		 	
		 </collection>
		 
		 
	</resultMap>
	
	
	<select id="boardTreeSearch" resultMap="boardMap">
		select * from (
		        select rownum rn, TMP.* from(
		        	select abcde.*, bl.member_no "is_like" from (
		        	select abcd.*, mp.attach_no "writer_profile" from (
		            select final.*, member.member_nick"REPLY_NICK" from (
		            select abmbr.board_no, abmbr.member_no, abmbr.board_date, abmbr.board_content, abmbr.board_is_reply, abmbr.follow_target, abmbr.member_nick, rpy.reply_no, rpy.reply_content, rpy.reply_member_no  from (
		            select abm.*, max(br.reply_no)"reply_no" from (
		            select ab.*, m.member_nick from member m inner join(
		            select * from board "B" inner join (
		            select follow_target from follow where follow_who = #{memberNo}
		            )"A" on b.member_no = a.follow_target 
					<if test="uptoNo != 0"> 
					 <![CDATA[
	            	where b.board_no <= #{uptoNo} 
	            	]]> 
	            	</if>
		            )ab on m.member_no = ab.member_no
		            )abm  left outer join board_reply br on br.board_no = abm.board_no group by abm.board_no, abm.member_no, abm.board_date, abm.board_content, abm.board_is_reply, abm.follow_target, abm.member_nick
		            )abmbr left outer join reply rpy on rpy.reply_no = abmbr."reply_no"
		            )final left outer join member on member.member_no = final.reply_member_no order by final.board_no desc 
		            )abcd left outer join member_profile mp on abcd.follow_target = mp.member_no
		            )abcde left outer join (
					    select * from board_like where member_no =  #{memberNo}
					)bl on abcde.board_no = bl.board_no
		        )TMP
		)where rn between ((#{pageCount}-1) * 3 + 1) and (#{pageCount} * 3)
	</select>
	<select id="treeSearchSubquery" resultType="BoardAttachVO" parameterType="int">
		select ba.board_no, attach.* from (
		      select * from board_attach where board_no = #{board_no}
		)ba inner join attach on ba.attach_no = attach.attach_no
	</select>
	
	
	<select id="selectOne" resultType="BoardDto" parameterType="int">
		select * from board where board_no = #{boardNo}
	</select>
	
	<select id="selectBoardMember" resultType="BoardMemberVO" parameterType="int">
		select * from board B
    left outer join member M on B.member_no = M.member_no 
    left outer join member_profile P on M.member_no = P.member_no
    where board_no=#{boardNo}
	</select>
	
	<!-- 게시물 첨부파일 조회 -->
	<select id="selectAttach" resultType="BoardAttachVO" parameterType="int">
		select * from attach A
    left outer join board_attach B on A.attach_no = B.attach_no
    where B.board_no = #{boardNo}
	</select>



<!-- insert 구문 -->	

	<insert id="insert" parameterType="BoardDto">
		insert into board (board_no, member_no, board_date, board_content, board_is_reply) 
		values (#{boardNo}, #{memberNo}, sysdate, #{boardContent}, #{boardIsReply})
	</insert>
	
	<!-- 게시물 수 -->
	<select id="boardCount" parameterType="int" resultType="int">
		select count(*)board_no from board where member_no = #{memberNo}
	</select>
	
	<!-- 게시글 수정 -->
	<update id="edit" parameterType="BoardDto">
		update board set board_content = #{boardContent}, board_is_reply = #{boardIsReply} where board_no = #{boardNo}
	</update>
	
 </mapper>
 
 
 
 
 
 
 
 